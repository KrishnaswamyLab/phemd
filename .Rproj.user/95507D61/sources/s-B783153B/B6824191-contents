###############
###############
### Example code for my specific dataset
###############
###############

###############
# load in metadata
##############

#devtools::install_github("cole-trapnell-lab/monocle-release", ref="monocle3_alpha")
#library('reticulate')
#use_python("/Users/Will/miniconda2/bin/python")
#py_install('umap-learn', method='conda')
#py_install("louvain", method='conda')

library('phemd')
library('monocle')
setwd('~/Desktop/medresearch/EMT_chronic/59298_data_E3')
savedest = '~/Desktop/medresearch/will_emt_scripts/Results/emt_E3/7-26-18/'
dir.create(file.path(savedest), showWarnings = FALSE) # create folder for output

filenames <- read.csv("filenames.csv", header=FALSE)
filenames <- as.character(filenames[[1]])
masses <- read.csv("all_data_subsampled_colnames.csv", header=FALSE)
masses <- as.character(masses[[1]])
mass_marker_map <- read.csv("mass_marker_map.csv")
mass_marker_map[,1] <- as.character(mass_marker_map[,1])
mass_marker_map[,2] <- as.character(mass_marker_map[,2])
# remove isotope name because not accurate/relevant
for(i in 1:nrow(mass_marker_map)) {
  mass_marker_map[i,1] <- substr(mass_marker_map[i,1],3,5)
}

library(qdapRegex)
for(i in 1:length(masses)) {
  cur_str <- rm_round(masses[i], extract=TRUE)[[1]]
  if(!is.na(cur_str)) {
    cur_str <- substr(cur_str,3,5)
  }
  masses[i] <- cur_str
}

# map masses to marker names
mass2marker_idx <- match(masses, mass_marker_map[,1])
markers <- rep("", length(masses))
markers[!is.na(mass2marker_idx)] <- mass_marker_map[mass2marker_idx[!is.na(mass2marker_idx)],2]
col_toremove <- which(markers == "")

# remove empty channels
markers <- markers[markers != ""]

# impt markers to upweight
casp_idx = which(markers == 'cCasp3')
upweight_idx = c(casp_idx)
upweight_factor <- 1.5


################
# Test functionality of methods
################

## Load raw data
setwd('./csvdata')
filenames <- list.files(".", pattern="*.csv", full.names=FALSE)
all_data <- list()
counter = 1
for(cur_file in filenames) {
  cur_data <- read.csv(cur_file, header=FALSE, sep=",")
  cur_data <- cur_data[,-col_toremove]
  cur_data[,upweight_idx] = cur_data[,upweight_idx] * upweight_factor

  all_data[[counter]] = cur_data
  counter = counter+1
}
setwd('..')

filenames_final <- filenames
for(i in 1:length(filenames)) {
  inhib_name <- strsplit(filenames[i], '_')[[1]][4]
  target <- strsplit(filenames[i], '_')[[1]][5]
  rep_str <- paste(inhib_name, ' (', target, ')', sep='')
  filenames_final[i] <- rep_str
}


for(i in 1:5) {
  filenames_final[i] <- sprintf('TGFb-only control %d', i)
  filenames_final[i+5] <- sprintf('Untreated control %d', i)
}

filenames_final[13] <- 'AT9283 (AuroraK)'
filenames_final[43] <- 'PI-103 (PI3K)'


## Create data object
myobj <- create_dataobj(all_data, markers, filenames_final)
myobj <- aggregate_samples(myobj) #aggregate (and subsample) data
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.09, tol=0.0005, verbose=T, ncenter=750, maxIter=12) #7-12-18
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-24-18
myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.075) #6-25-18

myobj <- order_cells(myobj)
myobj <- order_cells(myobj, root_state=14) # choose epithelial population as starting state (determined by looking at plots generated below)

# re-number states (for final plots)
state_labels <- pData(myobj@monocle_obj)$State
levels(state_labels) <- c("1", "3", "11", "4", "5", "6", "7", "8", "10", "9", "2")
state_labels <- factor(state_labels,levels(state_labels)[c(1,11,2,4,5,6,7,8,10,9,3)])
pData(myobj@monocle_obj)$State <- state_labels

# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
#cell_embedding <- t(pData(monocle_obj_final)[,2:3]) #for tsne
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)

save(myobj, file=paste(savedest,'myobj.RData',sep=""))

load(paste(savedest,'myobj.RData',sep=""))

# Create and save plots of generated embedding and cluster info to specified folder
cmap <- plot_embeddings(myobj, savedest)
#plot_heatmaps(myobj, savedest, selected_genes=NULL, upweighted_idx=upweight_idx, upweight_factor=0.8)
plot_heatmaps(myobj, savedest)

# Determine cell subtype breakdown of each sample
myobj <- cluster_individual_samples(myobj, verbose=T)
myweights <- myobj@data_cluster_weights
# Determine (dis)similarity of different cell subtypes
myobj <- generate_gdm(myobj)
#emd_dists_final <- myobj@emd_dist_mat

# Perform inter-sample comparisons using EMD
my_distmat <- compare_samples(myobj)

## Identify groups of similar inhibitors (hierarchical clustering)
cluster_assignments <- group_samples(my_distmat, distfun = 'hclust', ncluster=8)

# TODO: renumber so groups 1-8 are groups along major EMT axis (starting with untreated), group 9 = aurora kinase group
#cluster_assignments <- factor(cluster_assignments)
#levels(cluster_assignments) <- c('8', '1', '2', '9', '4', '3', '7', '5', '6')
#cluster_assignments <- factor(cluster_assignments,levels(cluster_assignments)[c(2,3,6,5,8,9,7,1,4)])
#cluster_assignments <- as.numeric(cluster_assignments)

# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)

# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=8, exaggeration_factor=40)
dm <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz=1, pt_label = myobj@snames)

# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)

# Plot representative cell subtype distribution (histogram) for each group of samples
plot_summary_histograms(myobj, cluster_assignments, savedest, cmap)

# Plot cell yield of each experimental condition
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz = 0.8)
