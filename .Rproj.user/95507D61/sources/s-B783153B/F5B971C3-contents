###############
###############
### Example code for test dataset
###############
###############


###############
# load in data
##############
library('monocle')
library('phemd')
library('RColorBrewer')
setwd('~/Desktop/medresearch/datasets_test_sc/melanoma_scRNA')

savedest = '~/Desktop/medresearch/will_emt_scripts/Results/melanoma/2018-08-02/'
dir.create(file.path(savedest), showWarnings = FALSE) # create folder for output

# load in raw data
data <- read.table('GSE72056_melanoma_single_cell_revised_v2.txt', sep='\t', header=TRUE)
data <- data[-which(!isUnique(data[,1])),]

myrownames <- data[,1]
data <- data[,-1]
data <- as.matrix(data)
rownames(data) <- myrownames

metadata <- data[1:3,]
length(unique(metadata['tumor',])) # number of unique samples
sum(metadata[2,] == 1) # number of non-malignant cells
sum(metadata[2,] == 2) # number of malignant cells

mydata <- data[-c(1:3),] #remove metadata from expression data table
genes <- rownames(mydata)

## Non-malignant cells
nonmalignant_idx <- which(metadata[2,] == 1)
mydata_nonmalignant <- mydata[,nonmalignant_idx]
metadata_nonmalignant <- metadata[,nonmalignant_idx]
## Malignant cells
malignant_idx <- which(metadata[2,] == 2)
mydata_malignant <- mydata[,malignant_idx]

## Create data object
all_data_nonmalignant <- list()
counter = 1
snames <- unique(metadata_nonmalignant['tumor',]) #unique samples
snames <- snames[order(snames,decreasing = FALSE)] #order in increasing sample ID
for(i in 1:length(snames)) {
  cur_sname <- snames[i]
  all_data_nonmalignant[[counter]] <- t(mydata_nonmalignant[,which(metadata_nonmalignant['tumor',] == cur_sname)]) #rows = cells, columns = genes
  counter = counter + 1
}
snames <- sapply(snames, function(x) paste('Mel', x, sep=''))

########################
### Healthy cell analysis
##########################
# Examine exhaustion signature + T-cell signature + other immune or endothelial cells
exhaustion_genes <- read.csv("exhaustion_genes.csv", header=FALSE)
exhaustion_genes <- as.character(exhaustion_genes[[1]])
exhaustion_genes_short <- c('IL2RA', 'FOXP3', 'TNFRSF1B', 'TNFRSF9', 'CD27', 'TIGIT', 'CTLA4', 'NFATC1', 'PDCD1', 'LAG3', 'HAVCR2')

treg_genes <- read.csv('treg_genes.csv', header=FALSE)
treg_genes <- as.character(treg_genes[[1]])
treg_genes_short <- treg_genes[1:5]

healthycell_genes <- read.csv('healthy_cell_genes_all.csv', header=FALSE)
healthycell_genes <- as.character(healthycell_genes[[1]])
healthycell_genes <- c(healthycell_genes, 'CD4') #CD4 expression is super low

healthycell_genes_short <- read.csv('healthy_cell_genes_short.csv', header=FALSE)
healthycell_genes_short <- as.character(healthycell_genes_short[[1]])
healthycell_genes_short <- unique(c(healthycell_genes_short))
healthycell_genes_short <- c(healthycell_genes_short, 'CD4')

nk_genes <- c('FCGR3A', 'FCGR3B', 'NCAM1')

naive_genes <- c('CCR7', 'TCF7', 'LEF1', 'SELL')

# use selected exhaustion markers + tcell + general healthy cell gene panel
all_nonmalignant_genes <- unique(c(exhaustion_genes_short, treg_genes_short, healthycell_genes_short, nk_genes, naive_genes))

#########################
# SAVE SMALLER DATA for Bioconductor vignette (don't run normally)
gene_idx <- match(all_nonmalignant_genes, genes)
genes_subset_idx <- sample(setdiff(1:length(genes), gene_idx), 1000-length(all_nonmalignant_genes), replace=F)
all_genes_ex <- c(all_nonmalignant_genes, genes[genes_subset_idx])
all_genes_ex_idx <- c(gene_idx, genes_subset_idx)
for(i in 1:length(all_data_nonmalignant)) {
  cur_data <- all_data_nonmalignant[[i]]
  all_data_nonmalignant[[i]] <- cur_data[,all_genes_ex_idx]
}
snames <- sapply(snames, function(x) paste('Mel', x, sep=''))
all_genes <- all_genes_ex
all_expn_data <- all_data_nonmalignant
selected_genes <- all_nonmalignant_genes
heatmap_genes <- unique(c(healthycell_genes_short, nk_genes, 'IL2RA', 'FOXP3', 'TNFRSF1B', 'TNFRSF9', 'CD27', 'TIGIT', 'CTLA4', 'NFATC1', 'PDCD1', 'LAG3', 'HAVCR2', naive_genes))
save(snames, all_genes, selected_genes, heatmap_genes, all_expn_data, file='melanomaData.RData')
#### END SMALLER DATA
#################


myobj_nonmalignant <- create_dataobj(all_data_nonmalignant, genes, as.character(snames))
myobj_nonmalignant <- remove_tiny_samples(myobj_nonmalignant, min_sz = 20)
myobj_nonmalignant <- aggregate_samples(myobj_nonmalignant) #subsample data
myobj_nonmalignant <- select_features(myobj_nonmalignant, all_nonmalignant_genes) #feature selection
myobj_nonmalignant <- embed_cells(myobj_nonmalignant, data_model = 'gaussianff', pseudo_expr = 0, sigma = 0.02, verbose=T) #generate monocle embedding (use gaussianff because this dataset has been log-normalized using TPM)

myobj <- order_cells(myobj_nonmalignant) #generate pseudotime ordering

# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)

# re-number states (for final plots)
state_labels <- pData(myobj@monocle_obj)$State
levels(state_labels) <- c("1", "3", "4", "5", "6", "7", "8", "9", "10", "11", "2")
state_labels <- factor(state_labels,levels(state_labels)[c(1,11,2:10)])
pData(myobj@monocle_obj)$State <- state_labels

save(myobj, file=paste(savedest,'myobj.RData',sep=""))

load(paste(savedest,'myobj.RData',sep=""))

# Create and save plots of generated embedding and cluster info to specified folder
cmap <- plot_embeddings(myobj, savedest)

selected_genes <- unique(c(healthycell_genes_short, nk_genes, 'IL2RA', 'FOXP3', 'TNFRSF1B', 'TNFRSF9', 'CD27', 'TIGIT', 'CTLA4', 'NFATC1', 'PDCD1', 'LAG3', 'HAVCR2', naive_genes))
plot_heatmaps(myobj, savedest, selected_genes)

# Determine cell subtype breakdown of each sample
myobj <- cluster_individual_samples(myobj)
myweights <- myobj@data_cluster_weights
# Determine (dis)similarity of different cell subtypes
myobj <- generate_gdm(myobj)
#emd_dists_final <- myobj@emd_dist_mat

# Perform inter-sample comparisons using EMD
my_distmat <- compare_samples(myobj)

## Identify similar groups of inhibitors (hierarchical clustering for now)
cluster_assignments <- group_samples(my_distmat, distfun = 'hclust', ncluster=5)

# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)

# Plot inhibitor groups using diffusion maps
dmap_colors <- brewer.pal(max(cluster_assignments),"Set3")
if(length(dmap_colors) > 1) dmap_colors[2] <- "#FFD92F" #darker yellow
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)

# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)

# Plot representative cell subtype distribution (histogram) for each group of samples
plot_summary_histograms(myobj, cluster_assignments, savedest, cmap)

# Plot cell yield
plot_cell_yield(myobj, savedest, cluster_assignments, cmap=dmap_colors, font_sz=1, w=8, h=7)
