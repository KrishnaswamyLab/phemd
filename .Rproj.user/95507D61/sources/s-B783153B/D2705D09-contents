###############
###############
### Example code for my specific dataset
###############
###############

###############
# load in metadata
##############
library('monocle')
library('phemd')
setwd('~/Desktop/medresearch/EMT_chronic/59298_singlets_E1')
savedest = '~/Desktop/medresearch/will_emt_scripts/Results/emt/6-20-18/'
dir.create(file.path(savedest), showWarnings = FALSE) # create folder for output

filenames <- read.csv("filenames.csv", header=FALSE)
filenames <- as.character(filenames[[1]])
masses <- read.csv("all_data_subsampled_colnames.csv", header=FALSE)
masses <- as.character(masses[[1]])
mass_marker_map <- read.csv("mass_marker_map.csv")
mass_marker_map[,1] <- as.character(mass_marker_map[,1])
mass_marker_map[,2] <- as.character(mass_marker_map[,2])
# remove isotope name because not accurate/relevant
for(i in 1:nrow(mass_marker_map)) {
  mass_marker_map[i,1] <- substr(mass_marker_map[i,1],3,5)
}

library(qdapRegex)
for(i in 1:length(masses)) {
  cur_str <- rm_round(masses[i], extract=TRUE)[[1]]
  if(!is.na(cur_str)) {
    cur_str <- substr(cur_str,3,5)
  }
  masses[i] <- cur_str
}

# map masses to marker names
mass2marker_idx <- match(masses, mass_marker_map[,1])
markers <- rep("", length(masses))
markers[!is.na(mass2marker_idx)] <- mass_marker_map[mass2marker_idx[!is.na(mass2marker_idx)],2]
col_toremove <- which(markers == "")

# remove empty channels
markers <- markers[markers != ""]

# impt markers to upweight
casp_idx = which(markers == 'cCasp3')
upweight_idx = c(casp_idx)
upweight_factor <- 1.5

filenames_orig <- filenames

################
# Test functionality of methods
################

## Load raw data
setwd('./csvdata')
filenames <- list.files(".", pattern="*.csv", full.names=FALSE)
all_data <- list()
counter = 1
for(cur_file in filenames) {
  cur_data <- read.csv(cur_file, header=FALSE, sep=",")
  cur_data <- cur_data[,-col_toremove]
  cur_data[,upweight_idx] = cur_data[,upweight_idx] * upweight_factor

  all_data[[counter]] = cur_data
  counter = counter+1
}
setwd('..')

# Re-map full data read by R to inhib subsampling order in MATLAB
for(i in 1:length(filenames_orig)) {
  filenames_orig[i] <- strsplit(filenames_orig[i], '[.]')[[1]][1]
  filenames[i] <- strsplit(filenames[i], '[.]')[[1]][1]
}
#reorder <- match(filenames, filenames_orig)
reorder <- match(filenames_orig, filenames) #filenames_orig is the correct order
all_data_copy <- all_data
for(i in 1:length(all_data_copy)) {
  all_data[[i]] <- all_data_copy[[reorder[i]]]
}

filenames_orig_final <- filenames_orig
for(i in 1:length(filenames_orig)) {
  inhib_name <- strsplit(filenames_orig[i], '_')[[1]][4]
  target <- strsplit(filenames_orig[i], '_')[[1]][5]
  rep_str <- paste(inhib_name, ' (', target, ')', sep='')
  filenames_orig_final[i] <- rep_str
}

for(i in 1:5) {
  filenames_orig_final[i] <- sprintf('TGFb-only control %d', i)
  filenames_orig_final[i+5] <- sprintf('Untreated control %d', i)
}

filenames_orig_final[13] <- 'AT9283 (AuroraK)'
filenames_orig_final[41] <- 'PI-103 (PI3K)'

## Create data object
myobj <- create_dataobj(all_data, markers, filenames_orig_final)
myobj <- aggregate_samples(myobj) #aggregate (and subsample) data
myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T) #generate monocle embedding
myobj <- order_cells(myobj)
myobj <- order_cells(myobj, root_state=10) # choose epithelial population as starting state (determined by looking at plots generated below)

# re-number states (for final plots)
state_labels <- pData(myobj@monocle_obj)$State
levels(state_labels) <- c("7", "6", "5", "8", "10", "9", "4", "2", "11", "1", "3")
state_labels <- factor(state_labels,levels(state_labels)[c(10,8,11,7,3,2,1,4,6,5,9)])
pData(myobj@monocle_obj)$State <- state_labels

# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)

save(myobj, file=paste(savedest,'myobj.RData',sep=""))

load(paste(savedest,'myobj.RData',sep=""))

# Create and save plots of generated embedding and cluster info to specified folder
cmap <- plot_embeddings(myobj, savedest)
#plot_heatmaps(myobj, savedest, selected_genes=NULL, upweighted_idx=upweight_idx, upweight_factor=0.8)
plot_heatmaps(myobj, savedest)

# Determine cell subtype breakdown of each sample
myobj <- cluster_individual_samples(myobj, verbose=T)
myweights <- myobj@data_cluster_weights
# Determine (dis)similarity of different cell subtypes
myobj <- generate_gdm(myobj)
#emd_dists_final <- myobj@emd_dist_mat

# Perform inter-sample comparisons using EMD
my_distmat <- compare_samples(myobj)

## Identify similar groups of inhibitors (hierarchical clustering for now)
cluster_assignments <- group_samples(my_distmat, distfun = 'hclust', ncluster=9)

# TODO: renumber so groups 1-8 are groups along major EMT axis (starting with untreated), group 9 = aurora kinase group
cluster_assignments <- factor(cluster_assignments)
levels(cluster_assignments) <- c('8', '1', '2', '9', '4', '3', '7', '5', '6')
cluster_assignments <- factor(cluster_assignments,levels(cluster_assignments)[c(2,3,6,5,8,9,7,1,4)])
cluster_assignments <- as.numeric(cluster_assignments)

# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)

# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=8, exaggeration_factor=40)
dm <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz=1, interactive=FALSE, pt_label = myobj@snames)

# Plot zoomed-in version of main section of graph
library('destiny')
library('scatterplot3d')
cluster_assignments_named <- sapply(cluster_assignments, function(x) paste("G-", x, sep=""))
myobj@snames
idx_to_rm <- c(6:10,47) #remove outlier group (causing rest of graph to appear squished on plot)
dims=1:3
point_data <- as.matrix(eigenvectors(dm)[,dims])
point_data <- point_data[-idx_to_rm,]
for (d in seq_along(dims)) {
  r <- range(point_data[, d])
  point_data[, d] <- scales::rescale(point_data[, d], c(0, 1), r)
}

png(filename=paste(savedest, "dm_inhib_embedding_zoom.png", sep=""),
    units="px",
    width=2400,
    height=1800,
    res=300)
s3d <-scatterplot3d(point_data+0.5, color=as.numeric(factor(cluster_assignments_named))[-idx_to_rm], pch=20, cex.symbols=2, box=FALSE,axis=FALSE,tick.marks=FALSE, grid=FALSE, xlab="", ylab="", zlab="", scale.y=20, angle=0)
dev.off()

png(filename=paste(savedest, "dm_inhib_embedding_zoom_labeled.png", sep=""),
    units="px",
    width=8000,
    height=6000,
    res=300)
s3d <-scatterplot3d(point_data+0.5, color=as.numeric(factor(cluster_assignments_named))[-idx_to_rm], pch=20, cex.symbols=3, box=FALSE,axis=FALSE,tick.marks=FALSE, grid=FALSE, xlab="", ylab="", zlab="", scale.y=20, angle=0)
s3d.coords <- s3d$xyz.convert(point_data+0.5)
text(s3d.coords$x, s3d.coords$y,             # x and y coordinates
     labels=myobj@snames[-idx_to_rm],               # text to plot
     cex=.3, pos=4)
dev.off()

# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)

# Plot representative cell subtype distribution (histogram) for each group of samples
plot_summary_histograms(myobj, cluster_assignments, savedest, cmap)

# Plot cell yield of each experimental condition
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz = 0.8)

### TODO: REFACTOR CODE BELOW THIS POINT


###########
# Plot embeddings of selected inhibitors
###########
monocle_obj <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj)

# Extract state labels from monocle data object
labels <- pData(phenoData(monocle_obj))
state_labels <- as.numeric(labels$State)

col.rainbow = rainbow(max(state_labels))
#col.rainbow = sample(col.rainbow)
palette(col.rainbow)

## cluster 5 (strong inhib)
curinhib = 14 #Chk
curinhib = 38 #MEK
curinhib = 56 #EGFR
curinhib = 6 #untreated
curinhib = 5 #tgfb-only

# cluster 7 (AK)
curinhib = 18
curinhib = 34

# cluster 2 (medium inhib)
curinhib = 52
curinhib = 55 #mTOR

filenames_orig[curinhib]
ncol(cell_embedding)
subsample_sz = 200
startidx = subsample_sz * (curinhib-1) + 1
endidx = subsample_sz * curinhib

png(filename=paste(savedest, "traj_state_labeled_selected.png", sep=""),
    units="px",
    width=2400,
    height=1800,
    res=200)
plot(cell_embedding[1,startidx:endidx], cell_embedding[2,startidx:endidx], col=alpha(state_labels[startidx:endidx],0.3), pch=20, cex=1.6,xlab="Dimension 1", ylab="Dimension 2")
dev.off()

########
# Examine dynamics along branch (built-in monocle functions for this don't work on CyTOF data)
# Ideally want to dissect branch point 4
########
monocle_obj <- myobj@monocle_obj
#plot_cell_trajectory(monocle_obj,show_branch_points=TRUE)
#varLabels(monocle_obj@featureData) <- 'gene_short_name'
#diff_test_res <- differentialGeneTest(monocle_obj, fullModelFormulaStr = "~sm.ns(Pseudotime)") # this function doesn't work
rownames(monocle_obj)
monocle_obj_subset <- monocle_obj[1:11,]
monocle_obj_branch <- monocle_obj_subset[,monocle_obj_subset$State %in% c(5,4,3)]
colnames(monocle_obj_branch) <- 1:length(colnames(monocle_obj_branch)) #TODO: make sure that this is still valid
plot_genes_in_pseudotime(monocle_obj_branch)
