##############
library('monocle')
library('phemd')
setwd('~/Desktop/medresearch/datasets_test_sc/melanoma_scRNA')
savedest = '~/Desktop/medresearch/will_emt_scripts/Results/melanoma/2018-06-03/'
load(paste(savedest,'myobj.RData',sep=""))
dim(myobj@data[[1]])
counter <- 0
for(i in 1:length(myobj)) {}
for(i in 1:length(myobj)) counter <- counter + nrow(myobj@data[[i]])
counter
for(i in 1:length(myobj@data)) counter <- counter + nrow(myobj@data[[i]])
counter = 0
for(i in 1:length(myobj@data)) counter <- counter + nrow(myobj@data[[i]])
counter
library('phemd')
library('monocle')
setwd('/Users/Will/Desktop/medresearch/EMT_acute/2018_AIE_R3_selected')
savedest = '~/Desktop/medresearch/will_emt_scripts/Results/emt_acute/8-1-18/'
dir.create(file.path(savedest), showWarnings = FALSE) # create folder for output
filenames <- read.csv("filenames.csv", header=FALSE)
filenames <- as.character(filenames[[1]])
markers <- read.csv("colnames", header=FALSE)
markers <- read.csv("colnames.csv", header=FALSE)
markers
markers <- read.csv("colnames.csv", header=FALSE)
markers
markers <- markers[cols_tokeep]
# remove empty channels
cols_tokeep <- c(17:30,32:51)
markers <- markers[cols_tokeep]
markers <- read.csv("colnames.csv", header=FALSE)
# remove empty channels
cols_tokeep <- c(17:30,32:51)
markers <- markers[cols_tokeep]
cols_tokeep
markers <- markers[cols_tokeep,]
markers
markers <- read.csv("colnames.csv", header=FALSE, stringsAsFactors = F)
# remove empty channels
cols_tokeep <- c(17:30,32:51)
markers <- t(markers)[cols_tokeep]
# impt markers to upweight
casp_idx = which(markers == 'cCasp3')
upweight_idx = c(casp_idx)
upweight_factor <- 1.5
setwd('./csvdata')
filenames <- list.files(".", pattern="*.csv", full.names=FALSE)
all_data <- list()
counter = 1
for(cur_file in filenames) {
cur_data <- read.csv(cur_file, header=FALSE, sep=",")
cur_data <- cur_data[,cols_tokeep]
cur_data[,upweight_idx] = cur_data[,upweight_idx] * upweight_factor
all_data[[counter]] = cur_data
counter = counter+1
}
setwd('..')
filenames_final <- filenames
for(i in 1:length(filenames)) {
inhib_name <- strsplit(filenames[i], '_')[[1]][6]
target <- strsplit(filenames[i], '_')[[1]][7]
rep_str <- paste(inhib_name, ' (', target, ')', sep='')
filenames_final[i] <- rep_str
}
filenames_final
## Create data object
myobj <- create_dataobj(all_data, markers, filenames_final)
myobj <- aggregate_samples(myobj) #aggregate (and subsample) data
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.12, verbose=T, ncenter=750, maxIter=12) #generate monocle embedding; doesn't seem to generate nice dmap
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.09, tol=0.0005, verbose=T, ncenter=750, maxIter=12) #7-12-18
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-24-18
myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=3) #6-25-18
# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
#cell_embedding <- t(pData(monocle_obj_final)[,2:3]) #for tsne
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.12, verbose=T, ncenter=750, maxIter=12) #generate monocle embedding; doesn't seem to generate nice dmap
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.09, tol=0.0005, verbose=T, ncenter=750, maxIter=12) #7-12-18
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-24-18
myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-25-18
myobj <- order_cells(myobj)
# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)
cell_embedding = reducedDimS(monocle_obj_final)
#cell_embedding <- t(pData(monocle_obj_final)[,2:3]) #for tsne
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
#cell_embedding <- t(pData(monocle_obj_final)[,2:3]) #for tsne
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)
savedest
# Create and save plots of generated embedding and cluster info to specified folder
cmap <- plot_embeddings(myobj, savedest)
#plot_heatmaps(myobj, savedest, selected_genes=NULL, upweighted_idx=upweight_idx, upweight_factor=0.8)
plot_heatmaps(myobj, savedest)
# Determine cell subtype breakdown of each sample
myobj <- cluster_individual_samples(myobj, verbose=T)
myweights <- myobj@data_cluster_weights
# Determine (dis)similarity of different cell subtypes
myobj <- generate_gdm(myobj)
# Perform inter-sample comparisons using EMD
my_distmat <- compare_samples(myobj)
## Identify similar groups of inhibitors (hierarchical clustering for now)
cluster_assignments <- group_samples(my_distmat, distfun = 'hclust', ncluster=5)
# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)
# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=8, exaggeration_factor=40)
dm <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz=1, pt_label = myobj@snames)
# Plot representative cell subtype distribution (histogram) for each group of samples
plot_summary_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot cell yield of each experimental condition
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz = 0.8)
filenames
filenames_short <- filenames
filenames_final <- filenames
for(i in 1:length(filenames)) {
inhib_name <- paste(strsplit(filenames[i], '_')[[1]][5], strsplit(filenames[i], '_')[[1]][6], sep='_')
target <- strsplit(filenames[i], '_')[[1]][7]
rep_str <- paste(inhib_name, ' (', target, ')', sep='')
filenames_final[i] <- rep_str
}
myobj@snames <- filenames_final
# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)
## Identify similar groups of inhibitors (hierarchical clustering for now)
cluster_assignments <- group_samples(my_distmat, distfun = 'hclust', ncluster=8)
# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=8, exaggeration_factor=40)
dm <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz=1, pt_label = myobj@snames)
# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot representative cell subtype distribution (histogram) for each group of samples
plot_summary_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot cell yield of each experimental condition
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz = 0.8)
# Plot cell yield of each experimental condition
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz = 0.4)
# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)
# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)
# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)
setwd('/Users/Will/Desktop/medresearch/EMT_acute/2018_AIE_R3_selected/30min')
setwd('/Users/Will/Desktop/medresearch/EMT_acute/2018_AIE_R3_selected')
savedest = '~/Desktop/medresearch/will_emt_scripts/Results/emt_acute/8-1-18/'
dir.create(file.path(savedest), showWarnings = FALSE) # create folder for output
filenames <- read.csv("filenames.csv", header=FALSE)
filenames <- as.character(filenames[[1]])
markers <- read.csv("colnames.csv", header=FALSE, stringsAsFactors = F)
# remove empty channels
cols_tokeep <- c(17:30,32:51)
markers <- t(markers)[cols_tokeep]
# impt markers to upweight
casp_idx = which(markers == 'cCasp3')
upweight_idx = c(casp_idx)
upweight_factor <- 1.5
## Load raw data
setwd('./csvdata/30min')
filenames <- list.files(".", pattern="*.csv", full.names=FALSE)
all_data <- list()
counter = 1
for(cur_file in filenames) {
cur_data <- read.csv(cur_file, header=FALSE, sep=",")
cur_data <- cur_data[,cols_tokeep]
cur_data[,upweight_idx] = cur_data[,upweight_idx] * upweight_factor
all_data[[counter]] = cur_data
counter = counter+1
}
setwd('..')
filenames_final <- filenames
for(i in 1:length(filenames)) {
inhib_name <- paste(strsplit(filenames[i], '_')[[1]][5], strsplit(filenames[i], '_')[[1]][6], sep='_')
target <- strsplit(filenames[i], '_')[[1]][7]
rep_str <- paste(inhib_name, ' (', target, ')', sep='')
filenames_final[i] <- rep_str
}
## Create data object
myobj <- create_dataobj(all_data, markers, filenames_final)
myobj <- aggregate_samples(myobj) #aggregate (and subsample) data
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.12, verbose=T, ncenter=750, maxIter=12) #generate monocle embedding; doesn't seem to generate nice dmap
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.09, tol=0.0005, verbose=T, ncenter=750, maxIter=12) #7-12-18
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-24-18
myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=3) #6-25-18
# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
#cell_embedding <- t(pData(monocle_obj_final)[,2:3]) #for tsne
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
dev.new()
#cell_embedding <- t(pData(monocle_obj_final)[,2:3]) #for tsne
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
filenames
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.12, verbose=T, ncenter=750, maxIter=12) #generate monocle embedding; doesn't seem to generate nice dmap
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.09, tol=0.0005, verbose=T, ncenter=750, maxIter=12) #7-12-18
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-24-18
myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-25-18
markers
# impt markers to upweight
casp_idx = which(markers == 'ccasp')
upweight_idx = c(casp_idx)
upweight_factor <- 1.5
casp_idx
getwd()
setwd('..')
## Load raw data
setwd('./csvdata/30min')
filenames <- list.files(".", pattern="*.csv", full.names=FALSE)
all_data <- list()
counter = 1
for(cur_file in filenames) {
cur_data <- read.csv(cur_file, header=FALSE, sep=",")
cur_data <- cur_data[,cols_tokeep]
cur_data[,upweight_idx] = cur_data[,upweight_idx] * upweight_factor
all_data[[counter]] = cur_data
counter = counter+1
}
setwd('../..')
filenames_final <- filenames
for(i in 1:length(filenames)) {
inhib_name <- paste(strsplit(filenames[i], '_')[[1]][5], strsplit(filenames[i], '_')[[1]][6], sep='_')
target <- strsplit(filenames[i], '_')[[1]][7]
rep_str <- paste(inhib_name, ' (', target, ')', sep='')
filenames_final[i] <- rep_str
}
filenames_final
## Create data object
myobj <- create_dataobj(all_data, markers, filenames_final)
myobj <- aggregate_samples(myobj) #aggregate (and subsample) data
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.12, verbose=T, ncenter=750, maxIter=12) #generate monocle embedding; doesn't seem to generate nice dmap
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.09, tol=0.0005, verbose=T, ncenter=750, maxIter=12) #7-12-18
#myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-24-18
myobj <- embed_cells(myobj, data_model = 'gaussianff', pseudo_expr=0, sigma=0.06, verbose=T, ncenter=750, maxIter=12) #6-25-18
# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
#cell_embedding <- t(pData(monocle_obj_final)[,2:3]) #for tsne
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
library('monocle')
library('phemd')
setwd('~/Desktop/medresearch/datasets_test_sc/melanoma_scRNA')
savedest = '~/Desktop/medresearch/will_emt_scripts/Results/melanoma/2018-08-02/'
dir.create(file.path(savedest), showWarnings = FALSE) # create folder for output
# load in raw data
data <- read.table('GSE72056_melanoma_single_cell_revised_v2.txt', sep='\t', header=TRUE)
data <- data[-which(!isUnique(data[,1])),]
myrownames <- data[,1]
data <- data[,-1]
data <- as.matrix(data)
rownames(data) <- myrownames
metadata <- data[1:3,]
length(unique(metadata['tumor',])) # number of unique samples
sum(metadata[2,] == 1) # number of non-malignant cells
sum(metadata[2,] == 2) # number of malignant cells
mydata <- data[-c(1:3),] #remove metadata from expression data table
genes <- rownames(mydata)
## Non-malignant cells
nonmalignant_idx <- which(metadata[2,] == 1)
mydata_nonmalignant <- mydata[,nonmalignant_idx]
metadata_nonmalignant <- metadata[,nonmalignant_idx]
## Malignant cells
malignant_idx <- which(metadata[2,] == 2)
mydata_malignant <- mydata[,malignant_idx]
## Create data object
all_data_nonmalignant <- list()
counter = 1
snames <- unique(metadata_nonmalignant['tumor',]) #unique samples
snames <- snames[order(snames,decreasing = FALSE)] #order in increasing sample ID
for(i in 1:length(snames)) {
cur_sname <- snames[i]
all_data_nonmalignant[[counter]] <- t(mydata_nonmalignant[,which(metadata_nonmalignant['tumor',] == cur_sname)]) #rows = cells, columns = genes
counter = counter + 1
}
########################
### Healthy cell analysis
##########################
# Examine exhaustion signature + T-cell signature + other immune or endothelial cells
exhaustion_genes <- read.csv("exhaustion_genes.csv", header=FALSE)
exhaustion_genes <- as.character(exhaustion_genes[[1]])
exhaustion_genes_short <- c('IL2RA', 'FOXP3', 'TNFRSF1B', 'TNFRSF9', 'CD27', 'TIGIT', 'CTLA4', 'NFATC1', 'PDCD1', 'LAG3', 'HAVCR2')
treg_genes <- read.csv('treg_genes.csv', header=FALSE)
treg_genes <- as.character(treg_genes[[1]])
treg_genes_short <- treg_genes[1:5]
healthycell_genes <- read.csv('healthy_cell_genes_all.csv', header=FALSE)
healthycell_genes <- as.character(healthycell_genes[[1]])
healthycell_genes <- c(healthycell_genes, 'CD4') #CD4 expression is super low
healthycell_genes_short <- read.csv('healthy_cell_genes_short.csv', header=FALSE)
healthycell_genes_short <- as.character(healthycell_genes_short[[1]])
healthycell_genes_short <- unique(c(healthycell_genes_short))
healthycell_genes_short <- c(healthycell_genes_short, 'CD4')
nk_genes <- c('FCGR3A', 'FCGR3B', 'NCAM1')
naive_genes <- c('CCR7', 'TCF7', 'LEF1', 'SELL')
# use selected exhaustion markers + tcell + general healthy cell gene panel
all_nonmalignant_genes <- unique(c(exhaustion_genes_short, treg_genes_short, healthycell_genes_short, nk_genes, naive_genes))
snames <- sapply(snames, function(x) paste('Mel', x, sep=''))
myobj_nonmalignant <- create_dataobj(all_data_nonmalignant, genes, as.character(snames))
#myobj_nonmalignant <- new('MArray', data = all_data_nonmalignant, markers = genes, snames = as.character(snames))
#myobj_nonmalignant <- MArray(data = all_data_nonmalignant, markers = genes, snames = as.character(snames))
myobj_nonmalignant <- remove_tiny_samples(myobj_nonmalignant, min_sz = 20)
myobj_nonmalignant <- aggregate_samples(myobj_nonmalignant) #subsample data
myobj_nonmalignant <- select_features(myobj_nonmalignant, all_nonmalignant_genes) #feature selection
myobj_nonmalignant <- embed_cells(myobj_nonmalignant, data_model = 'gaussianff', pseudo_expr = 0, sigma = 0.02, verbose=T) #generate monocle embedding (use gaussianff because this dataset has been log-normalized using TPM)
myobj <- order_cells(myobj_nonmalignant) #generate pseudotime ordering
# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
plot(cell_embedding[1,], cell_embedding[2,],pch=20, cex=1)
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)
save(myobj, file=paste(savedest,'myobj.RData',sep=""))
load(paste(savedest,'myobj.RData',sep=""))
# Create and save plots of generated embedding and cluster info to specified folder
cmap <- plot_embeddings(myobj, savedest)
selected_genes <- unique(c(healthycell_genes_short, nk_genes, 'IL2RA', 'FOXP3', 'TNFRSF1B', 'TNFRSF9', 'CD27', 'TIGIT', 'CTLA4', 'NFATC1', 'PDCD1', 'LAG3', 'HAVCR2', naive_genes))
plot_heatmaps(myobj, savedest, selected_genes)
# Determine cell subtype breakdown of each sample
myobj <- cluster_individual_samples(myobj)
# Determine (dis)similarity of different cell subtypes
myobj <- generate_gdm(myobj)
myweights <- myobj@data_cluster_weights
# Perform inter-sample comparisons using EMD
my_distmat <- compare_samples(myobj)
## Identify similar groups of inhibitors (hierarchical clustering for now)
cluster_assignments <- group_samples(my_distmat, distfun = 'hclust', ncluster=5)
# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot representative cell subtype distribution (histogram) for each group of samples
plot_summary_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot cell yield
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz=1, w=8, h=7)
# Plot cell yield
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz=2, w=8, h=7)
# Plot cell yield
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz=1, w=8, h=7)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz = 1, pt_label=snames, w=8,h=5)
sessionInfo()
library('monocle')
library('phemd')
setwd('~/Desktop/medresearch/datasets_test_sc/melanoma_scRNA')
savedest = '~/Desktop/medresearch/will_emt_scripts/Results/melanoma/2018-08-02/'
dir.create(file.path(savedest), showWarnings = FALSE) # create folder for output
# load in raw data
data <- read.table('GSE72056_melanoma_single_cell_revised_v2.txt', sep='\t', header=TRUE)
data <- data[-which(!isUnique(data[,1])),]
myrownames <- data[,1]
data <- data[,-1]
data <- as.matrix(data)
rownames(data) <- myrownames
metadata <- data[1:3,]
length(unique(metadata['tumor',])) # number of unique samples
sum(metadata[2,] == 1) # number of non-malignant cells
sum(metadata[2,] == 2) # number of malignant cells
mydata <- data[-c(1:3),] #remove metadata from expression data table
genes <- rownames(mydata)
## Non-malignant cells
nonmalignant_idx <- which(metadata[2,] == 1)
mydata_nonmalignant <- mydata[,nonmalignant_idx]
metadata_nonmalignant <- metadata[,nonmalignant_idx]
## Malignant cells
malignant_idx <- which(metadata[2,] == 2)
mydata_malignant <- mydata[,malignant_idx]
## Create data object
all_data_nonmalignant <- list()
counter = 1
snames <- unique(metadata_nonmalignant['tumor',]) #unique samples
snames <- snames[order(snames,decreasing = FALSE)] #order in increasing sample ID
for(i in 1:length(snames)) {
cur_sname <- snames[i]
all_data_nonmalignant[[counter]] <- t(mydata_nonmalignant[,which(metadata_nonmalignant['tumor',] == cur_sname)]) #rows = cells, columns = genes
counter = counter + 1
}
snames <- sapply(snames, function(x) paste('Mel', x, sep=''))
########################
### Healthy cell analysis
##########################
# Examine exhaustion signature + T-cell signature + other immune or endothelial cells
exhaustion_genes <- read.csv("exhaustion_genes.csv", header=FALSE)
exhaustion_genes <- as.character(exhaustion_genes[[1]])
exhaustion_genes_short <- c('IL2RA', 'FOXP3', 'TNFRSF1B', 'TNFRSF9', 'CD27', 'TIGIT', 'CTLA4', 'NFATC1', 'PDCD1', 'LAG3', 'HAVCR2')
treg_genes <- read.csv('treg_genes.csv', header=FALSE)
treg_genes <- as.character(treg_genes[[1]])
treg_genes_short <- treg_genes[1:5]
healthycell_genes <- read.csv('healthy_cell_genes_all.csv', header=FALSE)
healthycell_genes <- as.character(healthycell_genes[[1]])
healthycell_genes <- c(healthycell_genes, 'CD4') #CD4 expression is super low
healthycell_genes_short <- read.csv('healthy_cell_genes_short.csv', header=FALSE)
healthycell_genes_short <- as.character(healthycell_genes_short[[1]])
healthycell_genes_short <- unique(c(healthycell_genes_short))
healthycell_genes_short <- c(healthycell_genes_short, 'CD4')
nk_genes <- c('FCGR3A', 'FCGR3B', 'NCAM1')
naive_genes <- c('CCR7', 'TCF7', 'LEF1', 'SELL')
# use selected exhaustion markers + tcell + general healthy cell gene panel
all_nonmalignant_genes <- unique(c(exhaustion_genes_short, treg_genes_short, healthycell_genes_short, nk_genes, naive_genes))
myobj_nonmalignant <- create_dataobj(all_data_nonmalignant, genes, as.character(snames))
#myobj_nonmalignant <- new('MArray', data = all_data_nonmalignant, markers = genes, snames = as.character(snames))
#myobj_nonmalignant <- MArray(data = all_data_nonmalignant, markers = genes, snames = as.character(snames))
myobj_nonmalignant <- remove_tiny_samples(myobj_nonmalignant, min_sz = 20)
myobj_nonmalignant <- aggregate_samples(myobj_nonmalignant) #subsample data
myobj_nonmalignant <- select_features(myobj_nonmalignant, all_nonmalignant_genes) #feature selection
myobj_nonmalignant <- embed_cells(myobj_nonmalignant, data_model = 'gaussianff', pseudo_expr = 0, sigma = 0.02, verbose=T) #generat
myobj <- order_cells(myobj_nonmalignant) #generate pseudotime ordering
# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
cell_embedding = reducedDimS(monocle_obj_final)
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)
# re-number states (for final plots)
state_labels <- pData(myobj@monocle_obj)$State
levels(state_labels) <- c("1", "3", "4", "5", "6", "7", "8", "9", "10", "11", "2")
state_labels <- factor(state_labels,levels(state_labels)[c(1,11,2,4,5,6,7,8,10,9,3)])
# re-number states (for final plots)
state_labels <- pData(myobj@monocle_obj)$State
levels(state_labels) <- c("1", "3", "4", "5", "6", "7", "8", "9", "10", "11", "2")
# re-number states (for final plots)
state_labels <- pData(myobj@monocle_obj)$State
levels(state_labels) <- c("1", "3", "4", "5", "6", "7", "8", "9", "10", "11", "2")
state_labels <- factor(state_labels,levels(state_labels)[c(1,11,2:10)])
pData(myobj@monocle_obj)$State <- state_labels
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)
# view 2D embedding
monocle_obj_final <- myobj@monocle_obj
plot_cell_trajectory(monocle_obj_final,show_branch_points=TRUE)
save(myobj, file=paste(savedest,'myobj.RData',sep=""))
# Create and save plots of generated embedding and cluster info to specified folder
cmap <- plot_embeddings(myobj, savedest)
selected_genes <- unique(c(healthycell_genes_short, nk_genes, 'IL2RA', 'FOXP3', 'TNFRSF1B', 'TNFRSF9', 'CD27', 'TIGIT', 'CTLA4', 'NFATC1', 'PDCD1', 'LAG3', 'HAVCR2', naive_genes))
plot_heatmaps(myobj, savedest, selected_genes)
myobj <- cluster_individual_samples(myobj)
myweights <- myobj@data_cluster_weights
# Determine (dis)similarity of different cell subtypes
myobj <- generate_gdm(myobj)
#emd_dists_final <- myobj@emd_dist_mat
# Perform inter-sample comparisons using EMD
my_distmat <- compare_samples(myobj)
## Identify similar groups of inhibitors (hierarchical clustering for now)
cluster_assignments <- group_samples(my_distmat, distfun = 'hclust', ncluster=5)
# Write inhibitor groups to file
print_cluster_assignments(cluster_assignments, myobj, savedest)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot representative cell subtype distribution (histogram) for each group of samples
plot_summary_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot cell yield
plot_cell_yield(myobj, savedest, cluster_assignments, font_sz=1, w=8, h=7)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_colors <- brewer.pal(max(cluster_assignments),"Set3")
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
library('RColorBrewer')
dmap_colors <- brewer.pal(max(cluster_assignments),"Set3")
dmap_colors
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
dmap_colors <- brewer.pal(max(cluster_assignments),"Set3")
if(length(dmap_colors) > 1) dmap_colors[2] <- "#FFD92F" #darker yellow
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
library('RColorBrewer')
dmap_colors <- brewer.pal(max(cluster_assignments),"Set3")
if(length(dmap_colors) > 1) dmap_colors[2] <- "#D3D3D3" #darker yellow
dmap_colors <- brewer.pal(max(cluster_assignments),"Set3")
if(length(dmap_colors) > 1) dmap_colors[2] <- "#D3D3D3" #darker yellow
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot inhibitor groups using diffusion maps (or TSNE)
#plot_grouped_samples_tsne(my_distmat, cluster_assignments, savedest, perplexity=3)
dmap_colors <- brewer.pal(max(cluster_assignments),"Set3")
if(length(dmap_colors) > 1) dmap_colors[2] <- "#FFD92F" #darker yellow
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
# Plot cell subtype distribution (histogram) for each sample
plot_sample_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot representative cell subtype distribution (histogram) for each group of samples
plot_summary_histograms(myobj, cluster_assignments, savedest, cmap)
# Plot cell yield
plot_cell_yield(myobj, savedest, cluster_assignments, cmap=dmap_colors, font_sz=1, w=8, h=7)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
dmap_obj <- plot_grouped_samples_dmap(my_distmat, cluster_assignments, savedest, cmap=dmap_colors, pt_sz = 1, pt_label=snames, w=8,h=5)
